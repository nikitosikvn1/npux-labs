// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileQuery {
    #[prost(uint32, tag = "1")]
    pub version: u32,
    #[prost(string, tag = "2")]
    pub filename: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileResponse {
    #[prost(oneof = "file_response::Response", tags = "1, 2")]
    pub response: ::core::option::Option<file_response::Response>,
}
/// Nested message and enum types in `FileResponse`.
pub mod file_response {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct FileMetadata {
        #[prost(enumeration = "file_metadata::Status", tag = "1")]
        pub status: i32,
        #[prost(uint64, tag = "2")]
        pub file_size: u64,
    }
    /// Nested message and enum types in `FileMetadata`.
    pub mod file_metadata {
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum Status {
            Found = 0,
            NotFound = 1,
        }
        impl Status {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Self::Found => "FOUND",
                    Self::NotFound => "NOT_FOUND",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "FOUND" => Some(Self::Found),
                    "NOT_FOUND" => Some(Self::NotFound),
                    _ => None,
                }
            }
        }
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ErrorDetails {
        #[prost(enumeration = "error_details::Kind", tag = "1")]
        pub kind: i32,
        #[prost(string, tag = "2")]
        pub message: ::prost::alloc::string::String,
    }
    /// Nested message and enum types in `ErrorDetails`.
    pub mod error_details {
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum Kind {
            InvalidQuery = 0,
            UnsupportedVersion = 1,
        }
        impl Kind {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Self::InvalidQuery => "INVALID_QUERY",
                    Self::UnsupportedVersion => "UNSUPPORTED_VERSION",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "INVALID_QUERY" => Some(Self::InvalidQuery),
                    "UNSUPPORTED_VERSION" => Some(Self::UnsupportedVersion),
                    _ => None,
                }
            }
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        #[prost(message, tag = "1")]
        Metadata(FileMetadata),
        #[prost(message, tag = "2")]
        Error(ErrorDetails),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TransferAck {
    #[prost(enumeration = "transfer_ack::AckStatus", tag = "1")]
    pub status: i32,
}
/// Nested message and enum types in `TransferAck`.
pub mod transfer_ack {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum AckStatus {
        Accepted = 0,
        Rejected = 1,
    }
    impl AckStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Accepted => "ACCEPTED",
                Self::Rejected => "REJECTED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ACCEPTED" => Some(Self::Accepted),
                "REJECTED" => Some(Self::Rejected),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileChunk {
    #[prost(uint32, tag = "1")]
    pub index: u32,
    #[prost(bytes = "vec", tag = "2")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
